{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "22f6a5db-98ff-492c-a3cb-5638662deec0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# MIT License\n",
    "#Copyright (c) 2024 Mohamed Harhash  \n",
    "#See the `LICENSE` file in the root directory for full license terms.\n",
    "#You are free to use, modify, and distribute this software, provided that the original copyright notice and license terms are included. \n",
    "#Please cite this original code if you use it in your research or application.\n",
    "\n",
    "#ICP-MS Automation Code: The code was developed by Mohamed Harhash during his Ph.D. at the Federal Institute of Hydrology, Koblenz, Germany \n",
    "# Code Author: Mohamed Harhash\n",
    "## For any inquiries regards the code, I can be contacted at m.harhash@daad-alumni.de \n",
    "\n",
    "\n",
    "# The code was developed to automatically initiate the ICP Go software to operate the Agilent ICP-MS 7700 and ICP-QQQ-MS 8900 instruments or any other Agilent instrument compitable with ICP Go software\n",
    "# It perform measurement sequences and automates the process by logging into the software, turning on the plasma, waiting for the warming time, selecting and creating batches, performing batch tuning, starting batches \n",
    "# and measurements, monitoring errors, sending emails about instrument status, and after measurements, signing out and closing the software\n",
    "#please read manual for installation and more details.  \n",
    "\n",
    "\n",
    "# import needed library\n",
    "import time\n",
    "import datetime\n",
    "import logging\n",
    "import smtplib\n",
    "from email.mime.text import MIMEText\n",
    "from selenium import webdriver\n",
    "from selenium.webdriver.common.by import By\n",
    "from selenium.webdriver.support.ui import WebDriverWait, Select\n",
    "from selenium.webdriver.support import expected_conditions as EC\n",
    "from selenium.common.exceptions import NoSuchElementException, TimeoutException\n",
    "\n",
    "logging.basicConfig(filename='script.log', level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n",
    "\n",
    "\n",
    "####                                                                    # 1-  open ICP Go software\n",
    "\n",
    "### Opening ICPMS Go software\n",
    "\n",
    "driver = webdriver.Chrome()\n",
    "driver.get(\"http://172.40.30.72:5000\") ### replace this IP address with the one provided by your software\n",
    "driver.maximize_window()\n",
    "\n",
    "#####                                                                     # 2- Logging into ICPMS Go #\n",
    "\n",
    "\n",
    "wait = WebDriverWait(driver, 20)\n",
    "username_input = wait.until(EC.element_to_be_clickable((By.NAME, \"username\")))\n",
    "\n",
    "username_input.click()\n",
    "username_input.send_keys(\"xxxx\") ##### replace it with your own user name \n",
    "password_input = driver.find_element(By.NAME, \"password\")\n",
    "password_input.send_keys(\"xxxx\") #### replace it with your own password\n",
    "login_button = driver.find_element(By.ID, \"submit\")\n",
    "login_button.click()\n",
    "\n",
    "## waiting 7 second to laod the page\n",
    "\n",
    "time.sleep(7)\n",
    "\n",
    "#driver.find_element(By.CSS_SELECTOR, \"#ok .pe-ripple__mask\").click() ### This was for handling a pop-up message that arises when logging into the ICPGo software, and you can disable it permanently from the MassHunter software if you need.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#####                                                                      # 3- Starting the plasma #\n",
    "\n",
    "\n",
    "\n",
    "driver.find_element(By.CSS_SELECTOR, \"#plasma .pe-ripple__mask\").click()\n",
    "\n",
    "time.sleep(2)\n",
    "driver.find_element(By.CSS_SELECTOR, \"#yes .pe-ripple__mask\").click()\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#####                                                                      # 4- Creating and managing new batches based on templates #\n",
    "\n",
    "driver.find_element(By.CSS_SELECTOR, \"svg\").click()\n",
    "driver.find_element(By.ID, \"template\").click()\n",
    "\n",
    "##### determine the current date,time and day of the week\n",
    "\n",
    "current_day_index = datetime.datetime.now().weekday()\n",
    "current_time = datetime.datetime.now().time()\n",
    "current_time_period = \"morning\" if current_time < datetime.datetime.strptime(\"12:00:00\", \"%H:%M:%S\").time() else \"evening\"\n",
    "day_names = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n",
    "selection = f\"{day_names[current_day_index]} {current_time_period}\"\n",
    "\n",
    "##### click dropdown list for selecting proper batche for the current day and time \n",
    "\n",
    "time.sleep(4)\n",
    "dropdown_element = driver.find_element(By.ID, \"template\")\n",
    "dropdown_element.click()\n",
    "dropdown = Select(dropdown_element)\n",
    "dropdown.select_by_visible_text(selection)\n",
    "\n",
    "#### Naming the created new batch as day name 'evening' or 'morning' and date\n",
    "\n",
    "timestamp = datetime.datetime.now().strftime(\"%d_%m_%Y\")\n",
    "element_name = f\"{selection}_{timestamp}\"\n",
    "print(element_name)\n",
    "driver.find_element(By.NAME, \"batchname\").click()\n",
    "time.sleep(5)\n",
    "driver.find_element(By.NAME, \"batchname\").send_keys(element_name)\n",
    "time.sleep(10)\n",
    "\n",
    "###### Saving the batche \n",
    "\n",
    "driver.find_element(By.CSS_SELECTOR, \"#savebatch .pe-ripple__mask\").click()\n",
    "time.sleep(10)\n",
    "\n",
    "########                                                                    # 5- Add the created batch to queue #   \n",
    "\n",
    "time.sleep(25)\n",
    "xpath_selector = f'//*[@id=\"queuebutton_{element_name}\"]/div'\n",
    "element = driver.find_element(By.XPATH, xpath_selector)\n",
    "element.click()\n",
    "\n",
    "#######                                                                     # 6- Waiting warming time #\n",
    "\n",
    "time.sleep(1900)\n",
    "\n",
    "## Refersh the software page and handling all pop-up messages \n",
    "\n",
    "driver.refresh()\n",
    "check_interval = 5\n",
    "\n",
    "def handle_alert(driver, check_interval):\n",
    "    try:\n",
    "        yes_button = WebDriverWait(driver, check_interval).until(\n",
    "            EC.element_to_be_clickable((By.CSS_SELECTOR, \"#yes .pe-ripple__mask\"))\n",
    "        )\n",
    "        yes_button.click()\n",
    "        time.sleep(3)\n",
    "        try:\n",
    "            ok_button = driver.find_element(By.CSS_SELECTOR, \"#ok .pe-ripple__mask\")\n",
    "            ok_button.click()\n",
    "        except NoSuchElementException:\n",
    "            print(\"The 'OK' button was not found. Continuing without clicking it.\")\n",
    "    except TimeoutException:\n",
    "        print(\"The 'Yes' button was not found after refreshing. Continuing without clicking it.\")\n",
    "\n",
    "handle_alert(driver, check_interval)\n",
    "\n",
    "def retry_login(driver, wait):\n",
    "    try:\n",
    "        username_element = wait.until(EC.element_to_be_clickable((By.NAME, \"username\")))\n",
    "        username_element.click()\n",
    "        username_element.send_keys(\"xxxx\")  # replace xxxx with your own user name \n",
    "    except TimeoutException:\n",
    "        print(\"The 'username' element was not found. Continuing without it.\")\n",
    "    try:\n",
    "        password_element = wait.until(EC.element_to_be_clickable((By.NAME, \"password\")))\n",
    "        password_element.click()\n",
    "        password_element.send_keys(\"xxxxx\") # replace xxxx with your own password \n",
    "    except TimeoutException:\n",
    "        print(\"The 'password' element was not found. Continuing without it.\")\n",
    "    try:\n",
    "        login_button = wait.until(EC.element_to_be_clickable((By.ID, \"submit\")))\n",
    "        login_button.click()\n",
    "    except TimeoutException:\n",
    "        print(\"The 'login' button was not found. Continuing without attempting to log in.\")\n",
    "\n",
    "retry_login(driver, wait)\n",
    "handle_alert(driver, check_interval)\n",
    "\n",
    "\n",
    "def click_with_retry(driver, button_selector, retry_interval=40):\n",
    "    while True:\n",
    "        try:\n",
    "            button = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, button_selector)))\n",
    "            button.click()\n",
    "            break\n",
    "        except (TimeoutException, NoSuchElementException):\n",
    "            print(f\"Button {button_selector} not found or not clickable. Retrying in {retry_interval} seconds...\")\n",
    "            time.sleep(retry_interval)\n",
    "\n",
    "            \n",
    "            \n",
    "###                                                                                       # 7- Run the queue and start tuning and the batch\n",
    "\n",
    "run_button_selector = \"#run .pe-ripple__mask\"\n",
    "queue_button_selector = \"#queue .pe-ripple__mask\"\n",
    "\n",
    "click_with_retry(driver, run_button_selector)\n",
    "time.sleep(20)\n",
    "click_with_retry(driver, queue_button_selector)\n",
    "\n",
    "#####                                                                                      # 8- Waiting tuning of the batch till finish\n",
    "\n",
    "\n",
    "time.sleep(180)\n",
    "\n",
    "\n",
    "#####                                                                                      # 9- check the error and send an email about the instrument status # \n",
    "\n",
    "try:\n",
    "    instrument_button = WebDriverWait(driver, 10).until(\n",
    "        EC.presence_of_element_located((By.CSS_SELECTOR, \"#instrument .pe-ripple__mask\"))\n",
    "    )\n",
    "    instrument_button.click()\n",
    "except Exception as e:\n",
    "    print(f\"Failed to click the instrument button: {e}\")\n",
    "\n",
    "error_message_selector = \"#errorLog > div\"\n",
    "try:\n",
    "    error_message_element = WebDriverWait(driver, 10).until(\n",
    "        EC.presence_of_element_located((By.CSS_SELECTOR, error_message_selector))\n",
    "    )\n",
    "    error_message_text = error_message_element.text\n",
    "    if error_message_text:\n",
    "        gmail_email = \"your email @gmail.com\"    ########## your E-mail \n",
    "        gmail_password = \"xxx xxx xxx xxx\"            #### access code of your E-mail obtained from you eamil setting ## your-app-password\n",
    "        recipient_email = \" recipient-email@example.com \"                 ######## here you can use your E-mail \n",
    "        subject = \"Error Alert_ICPMS_Monde\"                  ######### you can change it to the name you need \n",
    "        body = f\"Error Message: {error_message_text}\"\n",
    "\n",
    "        msg = MIMEText(body)\n",
    "        msg[\"Subject\"] = subject\n",
    "        msg[\"From\"] = gmail_email\n",
    "        msg[\"To\"] = recipient_email\n",
    "\n",
    "        server = smtplib.SMTP(\"smtp.gmail.com\", 587)\n",
    "        server.starttls()\n",
    "        server.login(gmail_email, gmail_password)\n",
    "        server.sendmail(gmail_email, recipient_email, msg.as_string())\n",
    "        server.quit()\n",
    "except Exception as e:\n",
    "    print(f\"An error occurred: {e}\")\n",
    "\n",
    "print(\"Email sent successfully.\")\n",
    "\n",
    "\n",
    "\n",
    "################                                                                           # 10- Waiting time for the measurement (around 4 hours) and it is more than our measurment time to ensure enough time after measurment ### \n",
    "\n",
    "driver.find_element(By.CSS_SELECTOR, \"#queue .pe-ripple__mask\").click()\n",
    "\n",
    "time.sleep(16000)\n",
    "\n",
    "\n",
    "###################                                                                         # 11-  Sing out  nad close ICP Go sodftware                                                   #\n",
    "\n",
    "\n",
    "try:\n",
    "    logout_button = WebDriverWait(driver, 10).until(\n",
    "        EC.element_to_be_clickable((By.CSS_SELECTOR, \"#login .pe-ripple__mask\"))\n",
    "    )\n",
    "    logout_button.click()\n",
    "except TimeoutException:\n",
    "    print(\"Logout button not clickable. Continuing without clicking.\")\n",
    "try:\n",
    "    ok_button = WebDriverWait(driver, 10).until(\n",
    "        EC.element_to_be_clickable((By.CSS_SELECTOR, \"#ok .pe-ripple__mask\"))\n",
    "    )\n",
    "    ok_button.click()\n",
    "except TimeoutException:\n",
    "    print(\"Ok button not clickable. Continuing without clicking.\")\n",
    "\n",
    "\n",
    "time.sleep(5)\n",
    "driver.quit()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
